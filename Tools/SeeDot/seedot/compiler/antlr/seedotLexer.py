# Generated from ..\compiler\antlr\seedot.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u016f\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3")
        buf.write("\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n")
        buf.write("\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3(\3(\3)\3)\3)\3)\3)\3*\3*\3*\3*\3")
        buf.write("+\3+\3+\3,\3,\3,\3,\7,\u011c\n,\f,\16,\u011f\13,\3-\3")
        buf.write("-\3.\6.\u0124\n.\r.\16.\u0125\3/\3/\3\60\5\60\u012b\n")
        buf.write("\60\3\60\3\60\5\60\u012f\n\60\3\60\5\60\u0132\n\60\3\60")
        buf.write("\6\60\u0135\n\60\r\60\16\60\u0136\3\60\3\60\5\60\u013b")
        buf.write("\n\60\3\61\6\61\u013e\n\61\r\61\16\61\u013f\5\61\u0142")
        buf.write("\n\61\3\61\3\61\6\61\u0146\n\61\r\61\16\61\u0147\3\61")
        buf.write("\6\61\u014b\n\61\r\61\16\61\u014c\3\61\3\61\5\61\u0151")
        buf.write("\n\61\3\62\3\62\5\62\u0155\n\62\3\62\6\62\u0158\n\62\r")
        buf.write("\62\16\62\u0159\3\63\3\63\3\64\6\64\u015f\n\64\r\64\16")
        buf.write("\64\u0160\3\64\3\64\3\65\3\65\3\65\3\65\7\65\u0169\n\65")
        buf.write("\f\65\16\65\u016c\13\65\3\65\3\65\2\2\66\3\3\5\4\7\5\t")
        buf.write("\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y\2[.]")
        buf.write("\2_/a\2c\2e\2g\60i\61\3\2\b\5\2C\\aac|\3\2\62;\4\2GGg")
        buf.write("g\4\2--//\5\2\13\f\17\17\"\"\4\2\f\f\17\17\2\u017b\2\3")
        buf.write("\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2")
        buf.write("\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2")
        buf.write("\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2")
        buf.write("\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3")
        buf.write("\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2")
        buf.write("/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2[\3\2\2\2\2_\3\2\2\2\2g\3\2")
        buf.write("\2\2\2i\3\2\2\2\3k\3\2\2\2\5m\3\2\2\2\7o\3\2\2\2\tq\3")
        buf.write("\2\2\2\13s\3\2\2\2\ru\3\2\2\2\17z\3\2\2\2\21}\3\2\2\2")
        buf.write("\23\u0080\3\2\2\2\25\u0083\3\2\2\2\27\u0085\3\2\2\2\31")
        buf.write("\u0088\3\2\2\2\33\u008b\3\2\2\2\35\u008e\3\2\2\2\37\u0091")
        buf.write("\3\2\2\2!\u0093\3\2\2\2#\u0095\3\2\2\2%\u0098\3\2\2\2")
        buf.write("\'\u009a\3\2\2\2)\u009c\3\2\2\2+\u009e\3\2\2\2-\u00a0")
        buf.write("\3\2\2\2/\u00a4\3\2\2\2\61\u00a8\3\2\2\2\63\u00ac\3\2")
        buf.write("\2\2\65\u00b0\3\2\2\2\67\u00b5\3\2\2\29\u00bb\3\2\2\2")
        buf.write(";\u00bf\3\2\2\2=\u00c6\3\2\2\2?\u00ca\3\2\2\2A\u00cf\3")
        buf.write("\2\2\2C\u00d7\3\2\2\2E\u00e3\3\2\2\2G\u00ea\3\2\2\2I\u00f1")
        buf.write("\3\2\2\2K\u00f9\3\2\2\2M\u0101\3\2\2\2O\u0109\3\2\2\2")
        buf.write("Q\u010b\3\2\2\2S\u0110\3\2\2\2U\u0114\3\2\2\2W\u0117\3")
        buf.write("\2\2\2Y\u0120\3\2\2\2[\u0123\3\2\2\2]\u0127\3\2\2\2_\u013a")
        buf.write("\3\2\2\2a\u0150\3\2\2\2c\u0152\3\2\2\2e\u015b\3\2\2\2")
        buf.write("g\u015e\3\2\2\2i\u0164\3\2\2\2kl\7*\2\2l\4\3\2\2\2mn\7")
        buf.write("+\2\2n\6\3\2\2\2op\7]\2\2p\b\3\2\2\2qr\7.\2\2r\n\3\2\2")
        buf.write("\2st\7_\2\2t\f\3\2\2\2uv\7k\2\2vw\7p\2\2wx\7k\2\2xy\7")
        buf.write("v\2\2y\16\3\2\2\2z{\7`\2\2{|\7V\2\2|\20\3\2\2\2}~\7<\2")
        buf.write("\2~\177\7-\2\2\177\22\3\2\2\2\u0080\u0081\7}\2\2\u0081")
        buf.write("\u0082\7m\2\2\u0082\24\3\2\2\2\u0083\u0084\7\177\2\2\u0084")
        buf.write("\26\3\2\2\2\u0085\u0086\7}\2\2\u0086\u0087\7r\2\2\u0087")
        buf.write("\30\3\2\2\2\u0088\u0089\7}\2\2\u0089\u008a\7u\2\2\u008a")
        buf.write("\32\3\2\2\2\u008b\u008c\7}\2\2\u008c\u008d\7f\2\2\u008d")
        buf.write("\34\3\2\2\2\u008e\u008f\7}\2\2\u008f\u0090\7i\2\2\u0090")
        buf.write("\36\3\2\2\2\u0091\u0092\7?\2\2\u0092 \3\2\2\2\u0093\u0094")
        buf.write("\7<\2\2\u0094\"\3\2\2\2\u0095\u0096\7@\2\2\u0096\u0097")
        buf.write("\7?\2\2\u0097$\3\2\2\2\u0098\u0099\7A\2\2\u0099&\3\2\2")
        buf.write("\2\u009a\u009b\7-\2\2\u009b(\3\2\2\2\u009c\u009d\7/\2")
        buf.write("\2\u009d*\3\2\2\2\u009e\u009f\7,\2\2\u009f,\3\2\2\2\u00a0")
        buf.write("\u00a1\7~\2\2\u00a1\u00a2\7,\2\2\u00a2\u00a3\7~\2\2\u00a3")
        buf.write(".\3\2\2\2\u00a4\u00a5\7>\2\2\u00a5\u00a6\7,\2\2\u00a6")
        buf.write("\u00a7\7@\2\2\u00a7\60\3\2\2\2\u00a8\u00a9\7>\2\2\u00a9")
        buf.write("\u00aa\7-\2\2\u00aa\u00ab\7@\2\2\u00ab\62\3\2\2\2\u00ac")
        buf.write("\u00ad\7>\2\2\u00ad\u00ae\7/\2\2\u00ae\u00af\7@\2\2\u00af")
        buf.write("\64\3\2\2\2\u00b0\u00b1\7t\2\2\u00b1\u00b2\7g\2\2\u00b2")
        buf.write("\u00b3\7n\2\2\u00b3\u00b4\7w\2\2\u00b4\66\3\2\2\2\u00b5")
        buf.write("\u00b6\7t\2\2\u00b6\u00b7\7g\2\2\u00b7\u00b8\7n\2\2\u00b8")
        buf.write("\u00b9\7w\2\2\u00b9\u00ba\78\2\2\u00ba8\3\2\2\2\u00bb")
        buf.write("\u00bc\7g\2\2\u00bc\u00bd\7z\2\2\u00bd\u00be\7r\2\2\u00be")
        buf.write(":\3\2\2\2\u00bf\u00c0\7c\2\2\u00c0\u00c1\7t\2\2\u00c1")
        buf.write("\u00c2\7i\2\2\u00c2\u00c3\7o\2\2\u00c3\u00c4\7c\2\2\u00c4")
        buf.write("\u00c5\7z\2\2\u00c5<\3\2\2\2\u00c6\u00c7\7u\2\2\u00c7")
        buf.write("\u00c8\7i\2\2\u00c8\u00c9\7p\2\2\u00c9>\3\2\2\2\u00ca")
        buf.write("\u00cb\7v\2\2\u00cb\u00cc\7c\2\2\u00cc\u00cd\7p\2\2\u00cd")
        buf.write("\u00ce\7j\2\2\u00ce@\3\2\2\2\u00cf\u00d0\7u\2\2\u00d0")
        buf.write("\u00d1\7k\2\2\u00d1\u00d2\7i\2\2\u00d2\u00d3\7o\2\2\u00d3")
        buf.write("\u00d4\7q\2\2\u00d4\u00d5\7k\2\2\u00d5\u00d6\7f\2\2\u00d6")
        buf.write("B\3\2\2\2\u00d7\u00d8\7p\2\2\u00d8\u00d9\7q\2\2\u00d9")
        buf.write("\u00da\7t\2\2\u00da\u00db\7o\2\2\u00db\u00dc\7c\2\2\u00dc")
        buf.write("\u00dd\7n\2\2\u00dd\u00de\7k\2\2\u00de\u00df\7u\2\2\u00df")
        buf.write("\u00e0\7g\2\2\u00e0\u00e1\7N\2\2\u00e1\u00e2\7\64\2\2")
        buf.write("\u00e2D\3\2\2\2\u00e3\u00e4\7o\2\2\u00e4\u00e5\7d\2\2")
        buf.write("\u00e5\u00e6\7e\2\2\u00e6\u00e7\7q\2\2\u00e7\u00e8\7p")
        buf.write("\2\2\u00e8\u00e9\7x\2\2\u00e9F\3\2\2\2\u00ea\u00eb\7e")
        buf.write("\2\2\u00eb\u00ec\7q\2\2\u00ec\u00ed\7p\2\2\u00ed\u00ee")
        buf.write("\7x\2\2\u00ee\u00ef\7\64\2\2\u00ef\u00f0\7f\2\2\u00f0")
        buf.write("H\3\2\2\2\u00f1\u00f2\7t\2\2\u00f2\u00f3\7g\2\2\u00f3")
        buf.write("\u00f4\7u\2\2\u00f4\u00f5\7j\2\2\u00f5\u00f6\7c\2\2\u00f6")
        buf.write("\u00f7\7r\2\2\u00f7\u00f8\7g\2\2\u00f8J\3\2\2\2\u00f9")
        buf.write("\u00fa\7o\2\2\u00fa\u00fb\7c\2\2\u00fb\u00fc\7z\2\2\u00fc")
        buf.write("\u00fd\7r\2\2\u00fd\u00fe\7q\2\2\u00fe\u00ff\7q\2\2\u00ff")
        buf.write("\u0100\7n\2\2\u0100L\3\2\2\2\u0101\u0102\7t\2\2\u0102")
        buf.write("\u0103\7g\2\2\u0103\u0104\7x\2\2\u0104\u0105\7g\2\2\u0105")
        buf.write("\u0106\7t\2\2\u0106\u0107\7u\2\2\u0107\u0108\7g\2\2\u0108")
        buf.write("N\3\2\2\2\u0109\u010a\7&\2\2\u010aP\3\2\2\2\u010b\u010c")
        buf.write("\7n\2\2\u010c\u010d\7q\2\2\u010d\u010e\7q\2\2\u010e\u010f")
        buf.write("\7r\2\2\u010fR\3\2\2\2\u0110\u0111\7n\2\2\u0111\u0112")
        buf.write("\7g\2\2\u0112\u0113\7v\2\2\u0113T\3\2\2\2\u0114\u0115")
        buf.write("\7k\2\2\u0115\u0116\7p\2\2\u0116V\3\2\2\2\u0117\u011d")
        buf.write("\5Y-\2\u0118\u011c\5Y-\2\u0119\u011c\5]/\2\u011a\u011c")
        buf.write("\7)\2\2\u011b\u0118\3\2\2\2\u011b\u0119\3\2\2\2\u011b")
        buf.write("\u011a\3\2\2\2\u011c\u011f\3\2\2\2\u011d\u011b\3\2\2\2")
        buf.write("\u011d\u011e\3\2\2\2\u011eX\3\2\2\2\u011f\u011d\3\2\2")
        buf.write("\2\u0120\u0121\t\2\2\2\u0121Z\3\2\2\2\u0122\u0124\5]/")
        buf.write("\2\u0123\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0123")
        buf.write("\3\2\2\2\u0125\u0126\3\2\2\2\u0126\\\3\2\2\2\u0127\u0128")
        buf.write("\t\3\2\2\u0128^\3\2\2\2\u0129\u012b\5e\63\2\u012a\u0129")
        buf.write("\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write("\u012e\5a\61\2\u012d\u012f\5c\62\2\u012e\u012d\3\2\2\2")
        buf.write("\u012e\u012f\3\2\2\2\u012f\u013b\3\2\2\2\u0130\u0132\5")
        buf.write("e\63\2\u0131\u0130\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134")
        buf.write("\3\2\2\2\u0133\u0135\5]/\2\u0134\u0133\3\2\2\2\u0135\u0136")
        buf.write("\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137")
        buf.write("\u0138\3\2\2\2\u0138\u0139\5c\62\2\u0139\u013b\3\2\2\2")
        buf.write("\u013a\u012a\3\2\2\2\u013a\u0131\3\2\2\2\u013b`\3\2\2")
        buf.write("\2\u013c\u013e\5]/\2\u013d\u013c\3\2\2\2\u013e\u013f\3")
        buf.write("\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0142")
        buf.write("\3\2\2\2\u0141\u013d\3\2\2\2\u0141\u0142\3\2\2\2\u0142")
        buf.write("\u0143\3\2\2\2\u0143\u0145\7\60\2\2\u0144\u0146\5]/\2")
        buf.write("\u0145\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0145\3")
        buf.write("\2\2\2\u0147\u0148\3\2\2\2\u0148\u0151\3\2\2\2\u0149\u014b")
        buf.write("\5]/\2\u014a\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014a")
        buf.write("\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u014f\7\60\2\2\u014f\u0151\3\2\2\2\u0150\u0141\3\2\2")
        buf.write("\2\u0150\u014a\3\2\2\2\u0151b\3\2\2\2\u0152\u0154\t\4")
        buf.write("\2\2\u0153\u0155\5e\63\2\u0154\u0153\3\2\2\2\u0154\u0155")
        buf.write("\3\2\2\2\u0155\u0157\3\2\2\2\u0156\u0158\5]/\2\u0157\u0156")
        buf.write("\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u0157\3\2\2\2\u0159")
        buf.write("\u015a\3\2\2\2\u015ad\3\2\2\2\u015b\u015c\t\5\2\2\u015c")
        buf.write("f\3\2\2\2\u015d\u015f\t\6\2\2\u015e\u015d\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2")
        buf.write("\u0161\u0162\3\2\2\2\u0162\u0163\b\64\2\2\u0163h\3\2\2")
        buf.write("\2\u0164\u0165\7\61\2\2\u0165\u0166\7\61\2\2\u0166\u016a")
        buf.write("\3\2\2\2\u0167\u0169\n\7\2\2\u0168\u0167\3\2\2\2\u0169")
        buf.write("\u016c\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2")
        buf.write("\u016b\u016d\3\2\2\2\u016c\u016a\3\2\2\2\u016d\u016e\b")
        buf.write("\65\3\2\u016ej\3\2\2\2\24\2\u011b\u011d\u0125\u012a\u012e")
        buf.write("\u0131\u0136\u013a\u013f\u0141\u0147\u014c\u0150\u0154")
        buf.write("\u0159\u0160\u016a\4\b\2\2\2\3\2")
        return buf.getvalue()


class seedotLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    ADD = 19
    SUB = 20
    MUL = 21
    SPARSEMUL = 22
    MULCIR = 23
    ADDCIR = 24
    SUBCIR = 25
    RELU = 26
    RELU6 = 27
    EXP = 28
    ARGMAX = 29
    SGN = 30
    TANH = 31
    SIGMOID = 32
    NORMALISEL2 = 33
    MbConv = 34
    Conv2d = 35
    Reshape = 36
    Maxpool = 37
    Reverse = 38
    Sum = 39
    Loop = 40
    Let = 41
    In = 42
    Id = 43
    IntConst = 44
    FloatConst = 45
    WS = 46
    LineComment = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "','", "']'", "'init'", "'^T'", "':+'", 
            "'{k'", "'}'", "'{p'", "'{s'", "'{d'", "'{g'", "'='", "':'", 
            "'>='", "'?'", "'+'", "'-'", "'*'", "'|*|'", "'<*>'", "'<+>'", 
            "'<->'", "'relu'", "'relu6'", "'exp'", "'argmax'", "'sgn'", 
            "'tanh'", "'sigmoid'", "'normaliseL2'", "'mbconv'", "'conv2d'", 
            "'reshape'", "'maxpool'", "'reverse'", "'$'", "'loop'", "'let'", 
            "'in'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "SUB", "MUL", "SPARSEMUL", "MULCIR", "ADDCIR", "SUBCIR", 
            "RELU", "RELU6", "EXP", "ARGMAX", "SGN", "TANH", "SIGMOID", 
            "NORMALISEL2", "MbConv", "Conv2d", "Reshape", "Maxpool", "Reverse", 
            "Sum", "Loop", "Let", "In", "Id", "IntConst", "FloatConst", 
            "WS", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "ADD", "SUB", "MUL", 
                  "SPARSEMUL", "MULCIR", "ADDCIR", "SUBCIR", "RELU", "RELU6", 
                  "EXP", "ARGMAX", "SGN", "TANH", "SIGMOID", "NORMALISEL2", 
                  "MbConv", "Conv2d", "Reshape", "Maxpool", "Reverse", "Sum", 
                  "Loop", "Let", "In", "Id", "Nondigit", "IntConst", "Digit", 
                  "FloatConst", "FracConst", "ExpntPart", "Sign", "WS", 
                  "LineComment" ]

    grammarFileName = "seedot.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


